import streamlit as st
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import torch
from torch import nn
import torchvision.utils as vutils
from PIL import Image as PILImage
import cv2
import numpy as np
from realesrgan import RealESRGANer
from basicsr.archs.rrdbnet_arch import RRDBNet
from basicsr.utils.download_util import load_file_from_url
from diffusers import StableDiffusionImg2ImgPipeline
import os
import tempfile
import logging
import time
from io import BytesIO
import base64
import threading

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
RESULT_DIR = tempfile.mkdtemp()
os.makedirs(RESULT_DIR, exist_ok=True)
os.makedirs("output", exist_ok=True)
LORA_PATH = "./lora"  # –ü–∞–ø–∫–∞ —Å LoRA —Å—Ç–∏–ª—è–º–∏

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logger = logging.getLogger("LogoGenerator")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# --- FastAPI ---
fastapi_app = FastAPI()
fastapi_app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"]
)



import torch
import torch.nn as nn
from torch import optim

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ:
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')



# ------------------------------------------
# 1. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä cGAN
# ------------------------------------------
class Generator(nn.Module):
    def __init__(self, z_dim=100, text_embedding_dim=128, output_channels=3):
        super(Generator, self).__init__()
        self.text_embedding_dim = text_embedding_dim
        self.model = nn.Sequential(
            nn.ConvTranspose2d(z_dim + text_embedding_dim, 256, kernel_size=4, stride=1, padding=0),
            nn.BatchNorm2d(256),
            nn.ReLU(True),
            nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(True),
            nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(True),
            nn.ConvTranspose2d(64, output_channels, kernel_size=4, stride=2, padding=1),
            nn.Tanh()
        )

    def forward(self, z, text_embedding):
        combined = torch.cat([z, text_embedding], dim=1).view(z.size(0), -1, 1, 1)
        return self.model(combined)


# ------------------------------------------
# 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
# ------------------------------------------
TEXT_TO_INDEX = {}
current_index = 0
text_embedder = nn.Embedding(1000, 128).to(device)
generator = Generator().to(device)

if os.path.exists("model_epoch_0.pth"):
    checkpoint = torch.load("model_epoch_0.pth", map_location=device)
    generator.load_state_dict(checkpoint['generator_state_dict'])
generator.eval()

# ------------------------------------------
# 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ cGAN
# ------------------------------------------
def generate_cgan_images(label, count=5):
    global current_index
    if label not in TEXT_TO_INDEX:
        TEXT_TO_INDEX[label] = current_index
        current_index += 1

    images = []
    with torch.no_grad():
        noise = torch.randn(count, 100, device=device)
        text_idx = torch.tensor([TEXT_TO_INDEX[label]] * count, device=device)
        text_emb = text_embedder(text_idx)

        image_tensors = generator(noise, text_emb)
        image_tensors = (image_tensors + 1) / 2  # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è [0..1]

        for i in range(count):
            img_tensor = image_tensors[i].unsqueeze(0)
            path = f"{RESULT_DIR}/cgan_{label}_{i}.png"
            vutils.save_image(img_tensor, path)
            images.append(path)
    return images


# --- –ê–ø—Å–∫–µ–π–ª —á–µ—Ä–µ–∑ Real-ESRGAN ---
def init_real_upscaler():
    model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, scale=4)
    weights_path = load_file_from_url(
        url='https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth', 
        model_dir='weights', progress=True, file_name='RealESRGAN_x4plus.pth')
    return RealESRGANer(model_path=weights_path, model=model, scale=4, tile=400, half=False, device=device)

def upscale_image(input_path, label):
    try:
        if not os.path.exists(input_path):
            raise FileNotFoundError(f"Input image not found: {input_path}")
        img = cv2.imread(input_path, cv2.IMREAD_COLOR)
        if img.shape[2] == 4:
            img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)

        upscaler = init_real_upscaler()
        result, _ = upscaler.enhance(img, outscale=4)
        output_path = input_path.replace(".png", "_upscaled.png")
        cv2.imwrite(output_path, result)
        return output_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ upscale_image: {str(e)}")
        return None

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LoRA —Å—Ç–∏–ª–µ–π ---
def get_available_loras():
    if not os.path.exists(LORA_PATH):
        os.makedirs(LORA_PATH, exist_ok=True)
        return []
    
    loras = []
    for file in os.listdir(LORA_PATH):
        if file.endswith(('.safetensors', '.pt', '.bin')):
            loras.append(file)
    return loras

# --- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ SD 1.5 ---
@st.cache_resource
def load_diffusion_pipeline(lora_name=None):
    try:
        model_id = "runwayml/stable-diffusion-v1-5"
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {model_id}")
        pipe = StableDiffusionImg2ImgPipeline.from_pretrained(
            model_id,
            torch_dtype=torch.float16 if device == "cuda" else torch.float32,
            use_safetensors=True,
            safety_checker=None,
            requires_safety_checker=False
        ).to(device)

        if lora_name:
            lora_path = os.path.join(LORA_PATH, lora_name)
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å LoRA –≤–µ—Å–∞ –∏–∑: {lora_path}")
                pipe.load_lora_weights(
                    os.path.dirname(lora_path),
                    weight_name=os.path.basename(lora_path)
                )
                logger.info(f"‚úÖ LoRA —Å—Ç–∏–ª—å '{lora_name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å LoRA —Å—Ç–∏–ª—å '{lora_name}': {str(e)}")

        if device == "cuda":
            pipe.enable_model_cpu_offload()
            pipe.enable_attention_slicing()

        return pipe
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–π–ø–ª–∞–π–Ω–∞: {str(e)}", exc_info=True)
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {str(e)}")
        raise

def style_with_diffusion(image_path, label, strength=0.7, steps=30, guidance=13.0, lora_name=None):
    try:
        init_image = PILImage.open(image_path).convert("RGB")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 512x512
        if min(init_image.size) < 512:
            init_image = init_image.resize(
                (max(512, init_image.width), max(512, init_image.height)),
                PILImage.LANCZOS
            )

        pipe = load_diffusion_pipeline(lora_name)

        prompt = f"–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø: {label}, –º–∏–Ω–∏–º–∞–ª–∏–∑–º, –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞"
        negative_prompt = "—Ä–∞–∑–º—ã—Ç–æ—Å—Ç—å, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, –≤–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏, –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"

        try:
            result = pipe(
                prompt=prompt,
                image=init_image,
                strength=strength,
                num_inference_steps=steps,
                guidance_scale=guidance,
                negative_prompt=negative_prompt
            ).images[0]
        except torch.cuda.OutOfMemoryError:
            torch.cuda.empty_cache()
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏, —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ...")
            init_image = init_image.resize((512, 512))
            result = pipe(
                prompt=prompt,
                image=init_image,
                strength=strength,
                num_inference_steps=steps,
                guidance_scale=guidance,
                negative_prompt=negative_prompt
            ).images[0]

        final_path = f"output/logo_{label}_{int(time.time())}.png"
        result.save(final_path)
        return final_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None

# --- Streamlit UI ---
import streamlit as st
import pandas as pd
from PIL import Image
from io import BytesIO
import random
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import plotly.express as px
from typing import Optional

def run_streamlit():
    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state ---
    if 'generated_images' not in st.session_state:
        st.session_state.generated_images = []
    if 'selected_idx' not in st.session_state:
        st.session_state.selected_idx = None
    if 'final_image' not in st.session_state:
        st.session_state.final_image = None
    if 'eda_clicked' not in st.session_state:
        st.session_state.eda_clicked = False
    if 'dataset_for_EDA' not in st.session_state:
        st.session_state.dataset_for_EDA = None
    if 'info_clicked' not in st.session_state:
        st.session_state.info_clicked = False



    st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–æ–≥–æ—Ç–∏–ø–æ–≤", layout="wide")
    st.title("üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–æ–≥–æ—Ç–∏–ø–æ–≤")  

    label = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: EcoTech")

    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã") and label:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤..."):
            base_images = generate_cgan_images(label, count=5)
            upscaled_images = [upscale_image(img, label) for img in base_images]
            st.session_state.generated_images = [img for img in upscaled_images if img is not None]
            st.session_state.label = label
            st.session_state.selected_idx = None
            st.session_state.final_image = None

   

    if st.session_state.generated_images:
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞—Ä–∏–∞–Ω—Ç:")
        cols = st.columns(5)

        for idx, col in enumerate(cols):
            if idx < len(st.session_state.generated_images):
                image_path = st.session_state.generated_images[idx]
                with col:
                    if st.button(f"–í—ã–±—Ä–∞—Ç—å ‚Ññ{idx + 1}", key=f"select_{idx}"):
                        st.session_state.selected_idx = idx
                    st.image(
                        image_path,
                        caption=f"–®–∞–±–ª–æ–Ω ‚Ññ{idx + 1}",
                        width=150  # <-- –ó–¥–µ—Å—å –∑–∞–¥–∞—ë–º —Ä–∞–∑–º–µ—Ä
                    )


        if st.session_state.selected_idx is not None:
            selected_img = st.session_state.generated_images[st.session_state.selected_idx]
            st.success(f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç #{st.session_state.selected_idx+1}")

            with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏", expanded=True):
                strength = st.slider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏", 0.3, 0.9, 0.7, 0.05)
                steps = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤", 10, 100, 30, 5)
                guidance = st.slider("–ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ç–∏–ª—è", 7.0, 20.0, 13.0, 0.5)
                
                # –í—ã–±–æ—Ä LoRA —Å—Ç–∏–ª—è
                available_loras = get_available_loras()
                lora_options = ["–ù–µ—Ç"] + available_loras
                selected_lora = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ LoRA —Å—Ç–∏–ª—å", lora_options)

            if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å"):
                with st.spinner("–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è..."):
                    final_path = style_with_diffusion(
                        selected_img,
                        st.session_state.label,
                        strength,
                        steps,
                        guidance,
                        selected_lora if selected_lora != "–ù–µ—Ç" else None
                    )
                    st.session_state.final_image = final_path



            if st.session_state.final_image:
                st.markdown("###  –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø")
                st.image(
                    st.session_state.final_image,
                    caption=" –í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø",
                    width=512  # <-- –∑–¥–µ—Å—å –∑–∞–¥–∞—ë–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                )
                with open(st.session_state.final_image, "rb") as f:
                    st.download_button(
                        "üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø",
                        data=f,
                        file_name=f"{st.session_state.label}_logo.png",
                        mime="image/png"
                    )

    st.title("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

    themes = [
        "plotly",
        "ggplot2",
        "seaborn",
        "simple_white",
        "presentation",
        "streamlit",
    ]

    def dataset_to_eda(df):
        dataset_transform = pd.DataFrame()
        dataset_transform["epitets_num"] = df["text"].apply(lambda x: len(x.split(",")[1:]))
        dataset_transform["description"] = df["text"].apply(lambda x: ",".join(x.split(",")[1:]))
        dataset_transform["len"] = df["text"].apply(lambda x: len(x))
        dataset_transform["shape"] = df["image"].apply(lambda x: np.array(x).shape)
        dataset_transform["h"] = df["image"].apply(lambda x: np.array(x).shape[0])
        dataset_transform["w"] = df["image"].apply(lambda x: np.array(x).shape[1])
        dataset_transform["rgb"] = df["image"].apply(
            lambda x: "RGB" if len(np.array(x).shape) == 3 else "BW"
        )
        dataset_transform["ratio"] = dataset_transform["shape"].apply(lambda x: x[0] / x[1])
        dataset_transform["pixel"] = dataset_transform["shape"].apply(lambda x: np.prod(x))

        return dataset_transform

    with st.expander("–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏: —Å–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å", expanded=True):
        if st.button("–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"):
            st.session_state.info_clicked = True

        if st.session_state.info_clicked:
            st.header("–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞")
            st.markdown(
                f"1. cGAN –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                f"   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: 4-—Å–ª–æ–π–Ω–∞—è —Ç—Ä–∞–Ω—Åposed CNN (100D —à—É–º + 128D —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥)\n"
                f"   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ: 15 —ç–ø–æ—Ö, –º–µ—Ç—Ä–∏–∫–∞ FID\n\n"
                f"2. Real-ESRGAN –ø–æ–≤—ã—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (4x –∞–ø—Å–∫–µ–π–ª)\n\n"
                f"3. Stable Diffusion 1.5 —Å LoRA-–∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é:\n"
                f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 512x512\n"
                f"   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π —á–µ—Ä–µ–∑ LoRA\n"
                f"   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏\n\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ [—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub](https://github.com/HerrVonBeloff/AI-YP_24-team-42).", 
                unsafe_allow_html=True
            )
            st.header("–ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è cGAN")

            theme_model = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤", sorted(themes), key="theme_selector1"
            )

            try:
                df_loss = pd.read_csv("loss_long.csv")
                df_metric = pd.read_csv("metric.csv")
            except Exception as e:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –Ω–∞–ª–∏—á–∏–µ.")
                df_loss = pd.DataFrame()
                df_metric = pd.DataFrame()

            if not df_loss.empty:
                fig = px.line(
                    df_loss,
                    x="Epoch",
                    y="Loss Value",
                    color="Loss Type",
                    title="–ü–æ—Ç–µ—Ä–∏",
                    template=theme_model
                )
                fig.update_layout(
                    xaxis=dict(showgrid=True),
                    yaxis=dict(showgrid=True),
                    title=dict(x=0.4)
                )
                fig.update_layout(
                    xaxis_title="–≠–ø–æ—Ö–∏",
                    yaxis_title="–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å",
                    legend=dict(title="–ù–µ–π—Ä–æ—Å–µ—Ç—å")
                )
                fig.update_traces(name="–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä", selector=dict(name="D_loss"))
                fig.update_traces(name="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", selector=dict(name="G_loss"))
                st.plotly_chart(fig)

            st.header("–ú–µ—Ç—Ä–∏–∫–∞ FID")
            if not df_metric.empty:
                fig = px.line(
                    df_metric,
                    x="Epoch",
                    y="FID score",
                    title="–ú–µ—Ç—Ä–∏–∫–∞ FID",
                    template=theme_model
                )
                fig.update_layout(
                    bargap=0.1,
                    xaxis=dict(showgrid=True),
                    yaxis=dict(showgrid=True),
                    title=dict(x=0.4)
                )
                fig.update_layout(
                    xaxis_title="–≠–ø–æ—Ö–∏",
                    yaxis_title="–ó–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏"
                )
                st.plotly_chart(fig)

    with st.expander("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —Å–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å", expanded=True):
        st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        example = {
            "image": ["{'bytes': b'\\x89PNG\\n\\x1a\\n'}"],
            "text": ["Simple elegant logo for Concept, love orange ..."]
        }
        example_df = pd.DataFrame(example)
        example_df.index = range(456, 457)
        st.markdown("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞—Ç–∞—Å–µ—Ç—É")
        st.write(example_df)
        example_dataset_url = "https://drive.google.com/file/d/1BiUi9TOVgIjEggFQHb9d49Dp-z0pgIvI/view?usp=sharing"
        st.markdown(
            "–§–æ—Ä–º–∞—Ç `parquet`. "
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±–∞–π—Ç–æ–≤–æ–º –≤–∏–¥–µ –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞—Ä—è, "
            "—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º —ç–ø–∏—Ç–µ—Ç–æ–≤. "
            f"[üîó –ü—Ä–∏–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞]({example_dataset_url})"
        )

        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç (.parquet)", type=["parquet"])

        if uploaded_file is not None:
            try:
                dataset = pd.read_parquet(uploaded_file)
                dataset["image"] = dataset["image"].apply(
                    lambda x: Image.open(BytesIO(x.get("bytes")))
                )
                st.markdown(
                    f'<span style="color:gray">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: </span>{len(dataset)}',
                    unsafe_allow_html=True
                )
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")

    if uploaded_file is not None:
        try:
            dataset = pd.read_parquet(uploaded_file)
            dataset["image"] = dataset["image"].apply(
                lambda x: Image.open(BytesIO(x.get("bytes")))
            )
            st.session_state.dataset = dataset
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    with st.expander("–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞: —Å–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å", expanded=True):
        if st.button("–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞"):
            ind = random.randint(0, len(dataset) - 1) if len(dataset) > 0 else 0
            st.session_state.index = ind
            st.session_state.dataset_image = dataset.iloc[ind]["image"]
            st.session_state.dataset_text = dataset.iloc[ind]["text"]

        if "dataset_image" in st.session_state:
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.image(
                    st.session_state.dataset_image,
                    caption=f"–õ–æ–≥–æ—Ç–∏–ø –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞: –∏–Ω–¥–µ–∫—Å {st.session_state.index}",
                )
            st.markdown(
                f'<span style="color:gray">–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞: </span>{st.session_state.dataset_text}',
                unsafe_allow_html=True
            )

    with st.expander("EDA: —Å–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å", expanded=True):
        if st.button("EDA"):
            st.session_state.eda_clicked = True
            try:
                dataset_for_eda = dataset_to_eda(dataset)
                st.session_state.dataset_for_EDA = dataset_for_eda
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")

        if st.session_state.eda_clicked:
            if st.session_state.dataset_for_EDA is not None:
                data = st.session_state.dataset_for_EDA
                st.title("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                st.subheader("–û–±–ª–∞–∫–æ —Å–ª–æ–≤")

                if "word_cloud" not in st.session_state:
                    wc = WordCloud(background_color="black", width=1000, height=500)
                    words = data["description"].explode().values
                    wc.generate(" ".join(words))
                    fig, ax = plt.subplots(1, 1, figsize=(20, 10))
                    ax.axis("off")
                    ax.set_title("–û–±–ª–∞–∫–æ —Å–ª–æ–≤ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π –ª–æ–≥–æ—Ç–∏–ø–æ–≤", fontsize=30)
                    ax.imshow(wc, alpha=0.98)
                    st.session_state.word_cloud = fig

                st.pyplot(st.session_state.word_cloud)

                theme = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤", sorted(themes), key="theme_selector"
                )

                st.subheader("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω –æ–ø–∏—Å–∞–Ω–∏–π")
                bins = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_description"
                )
                bin_edges = np.linspace(data["len"].min(), data["len"].max(), bins + 1)
                fig = px.histogram(
                    data,
                    x="len",
                    nbins=bins,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω –æ–ø–∏—Å–∞–Ω–∏–π",
                    template=theme
                )
                fig.update_traces(
                    xbins=dict(
                        start=bin_edges[0],
                        end=bin_edges[-1],
                        size=(bin_edges[1] - bin_edges[0]),
                    ),
                )
                fig.update_layout(
                    bargap=0.1,
                    xaxis=dict(showgrid=True),
                    yaxis=dict(showgrid=True),
                    title=dict(x=0.4)
                )
                fig.update_layout(
                    xaxis_title="–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–∏–º–≤–æ–ª–∞—Ö",
                    yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                )
                st.plotly_chart(fig)

                st.subheader("Boxplot –¥–ª—è –¥–ª–∏–Ω –æ–ø–∏—Å–∞–Ω–∏–π")
                fig = px.box(data, x="len", template=theme)
                fig.update_layout(
                    title=dict(text="Boxplot –¥–ª–∏–Ω –æ–ø–∏—Å–∞–Ω–∏–π", x=0.4),
                    xaxis=dict(showgrid=True, title="–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–∏–º–≤–æ–ª–∞—Ö"),
                )
                st.plotly_chart(fig)

                st.subheader("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏—Ç–µ—Ç–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏*")
                st.write("*–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–π, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                bins6 = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_epitets_num"
                )
                bin_edges6 = np.linspace(
                    data["epitets_num"].min(), data["epitets_num"].max(), bins6 + 1
                )
                fig = px.histogram(
                    data,
                    x="epitets_num",
                    nbins=bins6,
                    title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏—Ç–µ—Ç–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏",
                    template=theme
                )
                fig.update_traces(
                    xbins=dict(
                        start=bin_edges6[0],
                        end=bin_edges6[-1],
                        size=(bin_edges6[1] - bin_edges6[0]),
                    ),
                )
                fig.update_layout(
                    bargap=0.1,
                    xaxis=dict(showgrid=True),
                    yaxis=dict(showgrid=True),
                    title=dict(x=0.4)
                )
                fig.update_layout(
                    xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏—Ç–µ—Ç–æ–≤",
                    yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                )
                st.plotly_chart(fig)

                st.subheader("Boxplot –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏—Ç–µ—Ç–æ–≤")
                fig = px.box(data, x="epitets_num", template=theme)
                fig.update_layout(
                    title=dict(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏—Ç–µ—Ç–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏", x=0.4),
                    xaxis=dict(showgrid=True, title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏—Ç–µ—Ç–æ–≤"),
                )
                st.plotly_chart(fig)

                st.title("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                value_counts = data["rgb"].value_counts()
                pie_data = pd.DataFrame({
                    "Value": ["RGB", "BW"],
                    "Count": [
                        value_counts.get("RGB", 0),
                        value_counts.get("BW", 0)
                    ]
                })
                st.subheader("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ RGB –∏ —á—ë—Ä–Ω–æ-–±–µ–ª—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤")
                fig = px.pie(pie_data, names="Value", values="Count", template=theme)
                fig.update_layout(title=dict(text="–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", x=0.4))
                st.plotly_chart(fig)

                st.subheader("–í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                bins1 = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_height"
                )
                bin_edges1 = np.linspace(data["h"].min(), data["h"].max(), bins1 + 1)
                fig = px.histogram(
                    data,
                    x="h",
                    nbins=bins1,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                    template=theme
                )
                fig.update_layout(
                    xaxis_title="–í—ã—Å–æ—Ç–∞",
                    yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                    title=dict(x=0.4)
                )
                fig.update_traces(
                    xbins=dict(
                        start=bin_edges1[0],
                        end=bin_edges1[-1],
                        size=(bin_edges1[1] - bin_edges1[0]),
                    ),
                )
                st.plotly_chart(fig)

                st.subheader("–®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                bins2 = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_wight"
                )
                bin_edges2 = np.linspace(data["w"].min(), data["w"].max(), bins2 + 1)
                fig = px.histogram(
                    data,
                    x="w",
                    nbins=bins2,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                    template=theme
                )
                fig.update_layout(
                    xaxis_title="–®–∏—Ä–∏–Ω–∞",
                    yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                    title=dict(x=0.4)
                )
                fig.update_traces(
                    xbins=dict(
                        start=bin_edges2[0],
                        end=bin_edges2[-1],
                        size=(bin_edges2[1] - bin_edges2[0]),
                    ),
                )
                st.plotly_chart(fig)

                st.subheader("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω")
                bins3 = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_ratio"
                )
                bin_edges3 = np.linspace(data["ratio"].min(), data["ratio"].max(), bins3 + 1)
                fig = px.histogram(
                    data,
                    x="ratio",
                    nbins=bins3,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω h/w",
                    template=theme
                )
                fig.update_layout(
                    xaxis_title="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω",
                    yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                    title=dict(x=0.4)
                )
                fig.update_traces(
                    xbins=dict(
                        start=bin_edges3[0],
                        end=bin_edges3[-1],
                        size=(bin_edges3[1] - bin_edges3[0]),
                    ),
                )
                st.plotly_chart(fig)

                st.subheader("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (–±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö)")
                filtered_data = data[data["ratio"] != 1]["ratio"]
                if not filtered_data.empty:
                    bins4 = st.slider(
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_ratio1"
                    )
                    bin_edges4 = np.linspace(filtered_data.min(), filtered_data.max(), bins4 + 1)
                    fig = px.histogram(
                        filtered_data,
                        x="ratio",
                        nbins=bins4,
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω h/w",
                        template=theme
                    )
                    fig.update_layout(
                        xaxis_title="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω",
                        yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                        title=dict(x=0.4)
                    )
                    fig.update_traces(
                        xbins=dict(
                            start=bin_edges4[0],
                            end=bin_edges4[-1],
                            size=(bin_edges4[1] - bin_edges4[0]),
                        ),
                    )
                    st.plotly_chart(fig)

                st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π")
                bins5 = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_pixel"
                )
                bin_edges5 = np.linspace(data["pixel"].min(), data["pixel"].max(), bins5 + 1)
                fig = px.histogram(
                    data,
                    x="pixel",
                    nbins=bins5,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏–∫—Å–µ–ª–µ–π",
                    template=theme
                )
                fig.update_layout(
                    xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π",
                    yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                    title=dict(x=0.4)
                )
                fig.update_traces(
                    xbins=dict(
                        start=bin_edges5[0],
                        end=bin_edges5[-1],
                        size=(bin_edges5[1] - bin_edges5[0]),
                    ),
                )
                st.plotly_chart(fig)


# --- FastAPI ---
@fastapi_app.post("/generate")
async def generate_logo_api(label: str, apply_custom_lora: bool = False):
    try:
        base_image = generate_cgan_images(label, count=1)[0]
        upscaled = upscale_image(base_image, label)
        final_image = style_with_diffusion(upscaled, label, apply_custom_lora=apply_custom_lora)
        
        if not final_image or not os.path.exists(final_image):
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø")
            
        with open(final_image, "rb") as f:
            return {"status": "success", "image": base64.b64encode(f.read()).decode()}
    except Exception as e:
        return {"status": "error", "message": str(e)}

def run_fastapi():
    uvicorn.run(fastapi_app, host="0.0.0.0", port=8001)

def main():
    api_thread = threading.Thread(target=run_fastapi, daemon=True)
    api_thread.start()
    run_streamlit()

if __name__ == "__main__":
    # –û—Ç–∫–ª—é—á–∞–µ–º oneDNN –¥–ª—è TensorFlow —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
    main()
